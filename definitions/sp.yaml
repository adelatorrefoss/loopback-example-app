swagger: '2.0'

info:
  x-ibm-name: sp
  version: 1.0.0
  title: sp

schemes:
  - https
host: $(catalog.host)
basePath: /api

consumes:
  - application/json
produces:
  - application/json

securityDefinitions:
 clientIdHeader:
   type: apiKey
   in: header
   name: X-IBM-Client-Id
 clientSecretHeader:
   in: "header"
   name: "X-IBM-Client-Secret"
   type: "apiKey"


security:
 -
   clientIdHeader: []
   clientSecretHeader: []

x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)

paths:
  '/Users/{id}/accessTokens/{fk}':
    get:
      tags:
        - User
      summary: Find a related item by id for accessTokens.
      operationId: User.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - User
      summary: Delete a related item by id for accessTokens.
      operationId: User.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - User
      summary: Update a related item by id for accessTokens.
      operationId: User.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/Users/{id}/accessTokens':
    get:
      tags:
        - User
      summary: Queries accessTokens of User.
      operationId: User.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - User
      summary: Creates a new instance in accessTokens of this model.
      operationId: User.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - User
      summary: Deletes all accessTokens of this model.
      operationId: User.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Users/{id}/accessTokens/count':
    get:
      tags:
        - User
      summary: Counts accessTokens of User.
      operationId: User.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users:
    post:
      tags:
        - User
      summary: Create a new instance of the model and persist it into the data source.
      operationId: User.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    put:
      tags:
        - User
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: User.upsert__put_Users
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    patch:
      tags:
        - User
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: User.upsert__patch_Users
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    get:
      tags:
        - User
      summary: Find all instances of the model matched by filter from the data source.
      operationId: User.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      deprecated: false
  /Users/replaceOrCreate:
    post:
      tags:
        - User
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: User.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/upsertWithWhere:
    post:
      tags:
        - User
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: User.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  '/Users/{id}/exists':
    get:
      tags:
        - User
      summary: Check whether a model instance exists in the data source.
      operationId: 'User.exists__get_Users_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Users/{id}':
    head:
      tags:
        - User
      summary: Check whether a model instance exists in the data source.
      operationId: 'User.exists__head_Users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - User
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: User.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    delete:
      tags:
        - User
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: User.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - User
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'User.prototype.updateAttributes__put_Users_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    patch:
      tags:
        - User
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'User.prototype.updateAttributes__patch_Users_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  '/Users/{id}/replace':
    post:
      tags:
        - User
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: User.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/findOne:
    get:
      tags:
        - User
      summary: Find first instance of the model matched by filter from the data source.
      operationId: User.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/update:
    post:
      tags:
        - User
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: User.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Users/count:
    get:
      tags:
        - User
      summary: Count instances of the model matched by where from the data source.
      operationId: User.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users/login:
    post:
      tags:
        - User
      summary: Login a user with username/email and password.
      operationId: User.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: >-
            Related objects to include in the response. See the description of
            return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created
              on login.

              Depending on the value of `include` parameter, the body may
              contain additional properties:

                - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)

            type: object
      deprecated: false
  /Users/logout:
    post:
      tags:
        - User
      summary: Logout a user with access token.
      operationId: User.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/confirm:
    get:
      tags:
        - User
      summary: Confirm a user registration with email verification token.
      operationId: User.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/reset:
    post:
      tags:
        - User
      summary: Reset password for a user with email.
      operationId: User.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/patients/{id}/services/{fk}':
    get:
      tags:
        - Patient
      summary: Find a related item by id for services.
      operationId: Patient.prototype.__findById__services
      parameters:
        - name: fk
          in: path
          description: Foreign key for services
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Service'
      deprecated: false
    delete:
      tags:
        - Patient
      summary: Delete a related item by id for services.
      operationId: Patient.prototype.__destroyById__services
      parameters:
        - name: fk
          in: path
          description: Foreign key for services
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Patient
      summary: Update a related item by id for services.
      operationId: Patient.prototype.__updateById__services
      parameters:
        - name: fk
          in: path
          description: Foreign key for services
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Service'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Service'
      deprecated: false
  '/patients/{id}/serviceRequests/{fk}':
    get:
      tags:
        - Patient
      summary: Find a related item by id for serviceRequests.
      operationId: Patient.prototype.__findById__serviceRequests
      parameters:
        - name: fk
          in: path
          description: Foreign key for serviceRequests
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ServiceRequest'
      deprecated: false
    delete:
      tags:
        - Patient
      summary: Delete a related item by id for serviceRequests.
      operationId: Patient.prototype.__destroyById__serviceRequests
      parameters:
        - name: fk
          in: path
          description: Foreign key for serviceRequests
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Patient
      summary: Update a related item by id for serviceRequests.
      operationId: Patient.prototype.__updateById__serviceRequests
      parameters:
        - name: fk
          in: path
          description: Foreign key for serviceRequests
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/ServiceRequest'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ServiceRequest'
      deprecated: false
  '/patients/{id}/services':
    get:
      tags:
        - Patient
      summary: Queries services of Patient.
      operationId: Patient.prototype.__get__services
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Service'
      deprecated: false
    post:
      tags:
        - Patient
      summary: Creates a new instance in services of this model.
      operationId: Patient.prototype.__create__services
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Service'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Service'
      deprecated: false
    delete:
      tags:
        - Patient
      summary: Deletes all services of this model.
      operationId: Patient.prototype.__delete__services
      parameters:
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/patients/{id}/services/count':
    get:
      tags:
        - Patient
      summary: Counts services of Patient.
      operationId: Patient.prototype.__count__services
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/patients/{id}/serviceRequests':
    get:
      tags:
        - Patient
      summary: Queries serviceRequests of Patient.
      operationId: Patient.prototype.__get__serviceRequests
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ServiceRequest'
      deprecated: false
    post:
      tags:
        - Patient
      summary: Creates a new instance in serviceRequests of this model.
      operationId: Patient.prototype.__create__serviceRequests
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/ServiceRequest'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ServiceRequest'
      deprecated: false
    delete:
      tags:
        - Patient
      summary: Deletes all serviceRequests of this model.
      operationId: Patient.prototype.__delete__serviceRequests
      parameters:
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/patients/{id}/serviceRequests/count':
    get:
      tags:
        - Patient
      summary: Counts serviceRequests of Patient.
      operationId: Patient.prototype.__count__serviceRequests
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /patients:
    post:
      tags:
        - Patient
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Patient.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Patient'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Patient'
      deprecated: false
    put:
      tags:
        - Patient
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Patient.upsert__put_patients
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Patient'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Patient'
      deprecated: false
    patch:
      tags:
        - Patient
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Patient.upsert__patch_patients
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Patient'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Patient'
      deprecated: false
    get:
      tags:
        - Patient
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Patient.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Patient'
      deprecated: false
  /patients/replaceOrCreate:
    post:
      tags:
        - Patient
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Patient.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Patient'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Patient'
      deprecated: false
  /patients/upsertWithWhere:
    post:
      tags:
        - Patient
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Patient.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Patient'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Patient'
      deprecated: false
  '/patients/{id}/exists':
    get:
      tags:
        - Patient
      summary: Check whether a model instance exists in the data source.
      operationId: 'Patient.exists__get_patients_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/patients/{id}':
    head:
      tags:
        - Patient
      summary: Check whether a model instance exists in the data source.
      operationId: 'Patient.exists__head_patients_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Patient
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Patient.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Patient'
      deprecated: false
    delete:
      tags:
        - Patient
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Patient.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Patient
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Patient.prototype.updateAttributes__put_patients_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Patient'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Patient'
      deprecated: false
    patch:
      tags:
        - Patient
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Patient.prototype.updateAttributes__patch_patients_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Patient'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Patient'
      deprecated: false
  '/patients/{id}/replace':
    post:
      tags:
        - Patient
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: Patient.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Patient'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Patient'
      deprecated: false
  /patients/findOne:
    get:
      tags:
        - Patient
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Patient.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Patient'
      deprecated: false
  /patients/update:
    post:
      tags:
        - Patient
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Patient.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Patient'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /patients/count:
    get:
      tags:
        - Patient
      summary: Count instances of the model matched by where from the data source.
      operationId: Patient.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/services/{id}/patient':
    get:
      tags:
        - Service
      summary: Fetches belongsTo relation patient.
      operationId: Service.prototype.__get__patient
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Patient'
      deprecated: false
  '/services/{id}/serviceRequest':
    get:
      tags:
        - Service
      summary: Fetches belongsTo relation serviceRequest.
      operationId: Service.prototype.__get__serviceRequest
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ServiceRequest'
      deprecated: false
  /services:
    post:
      tags:
        - Service
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Service.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Service'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Service'
      deprecated: false
    put:
      tags:
        - Service
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Service.upsert__put_services
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Service'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Service'
      deprecated: false
    patch:
      tags:
        - Service
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Service.upsert__patch_services
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Service'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Service'
      deprecated: false
    get:
      tags:
        - Service
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Service.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Service'
      deprecated: false
  /services/replaceOrCreate:
    post:
      tags:
        - Service
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Service.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Service'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Service'
      deprecated: false
  /services/upsertWithWhere:
    post:
      tags:
        - Service
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Service.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Service'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Service'
      deprecated: false
  '/services/{id}/exists':
    get:
      tags:
        - Service
      summary: Check whether a model instance exists in the data source.
      operationId: 'Service.exists__get_services_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/services/{id}':
    head:
      tags:
        - Service
      summary: Check whether a model instance exists in the data source.
      operationId: 'Service.exists__head_services_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Service
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Service.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Service'
      deprecated: false
    delete:
      tags:
        - Service
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Service.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Service
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Service.prototype.updateAttributes__put_services_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Service'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Service'
      deprecated: false
    patch:
      tags:
        - Service
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Service.prototype.updateAttributes__patch_services_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Service'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Service'
      deprecated: false
  '/services/{id}/replace':
    post:
      tags:
        - Service
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: Service.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Service'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Service'
      deprecated: false
  /services/findOne:
    get:
      tags:
        - Service
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Service.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Service'
      deprecated: false
  /services/update:
    post:
      tags:
        - Service
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Service.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Service'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /services/count:
    get:
      tags:
        - Service
      summary: Count instances of the model matched by where from the data source.
      operationId: Service.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/serviceRequests/{id}/patient':
    get:
      tags:
        - ServiceRequest
      summary: Fetches belongsTo relation patient.
      operationId: ServiceRequest.prototype.__get__patient
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Patient'
      deprecated: false
  '/serviceRequests/{id}/services/{fk}':
    get:
      tags:
        - ServiceRequest
      summary: Find a related item by id for services.
      operationId: ServiceRequest.prototype.__findById__services
      parameters:
        - name: fk
          in: path
          description: Foreign key for services
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Service'
      deprecated: false
    delete:
      tags:
        - ServiceRequest
      summary: Delete a related item by id for services.
      operationId: ServiceRequest.prototype.__destroyById__services
      parameters:
        - name: fk
          in: path
          description: Foreign key for services
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - ServiceRequest
      summary: Update a related item by id for services.
      operationId: ServiceRequest.prototype.__updateById__services
      parameters:
        - name: fk
          in: path
          description: Foreign key for services
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Service'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Service'
      deprecated: false
  '/serviceRequests/{id}/services':
    get:
      tags:
        - ServiceRequest
      summary: Queries services of ServiceRequest.
      operationId: ServiceRequest.prototype.__get__services
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Service'
      deprecated: false
    post:
      tags:
        - ServiceRequest
      summary: Creates a new instance in services of this model.
      operationId: ServiceRequest.prototype.__create__services
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Service'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Service'
      deprecated: false
    delete:
      tags:
        - ServiceRequest
      summary: Deletes all services of this model.
      operationId: ServiceRequest.prototype.__delete__services
      parameters:
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/serviceRequests/{id}/services/count':
    get:
      tags:
        - ServiceRequest
      summary: Counts services of ServiceRequest.
      operationId: ServiceRequest.prototype.__count__services
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /serviceRequests:
    post:
      tags:
        - ServiceRequest
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ServiceRequest.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ServiceRequest'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ServiceRequest'
      deprecated: false
    put:
      tags:
        - ServiceRequest
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: ServiceRequest.upsert__put_serviceRequests
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ServiceRequest'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ServiceRequest'
      deprecated: false
    patch:
      tags:
        - ServiceRequest
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: ServiceRequest.upsert__patch_serviceRequests
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ServiceRequest'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ServiceRequest'
      deprecated: false
    get:
      tags:
        - ServiceRequest
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ServiceRequest.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ServiceRequest'
      deprecated: false
  /serviceRequests/replaceOrCreate:
    post:
      tags:
        - ServiceRequest
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: ServiceRequest.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ServiceRequest'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ServiceRequest'
      deprecated: false
  /serviceRequests/upsertWithWhere:
    post:
      tags:
        - ServiceRequest
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: ServiceRequest.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ServiceRequest'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ServiceRequest'
      deprecated: false
  '/serviceRequests/{id}/exists':
    get:
      tags:
        - ServiceRequest
      summary: Check whether a model instance exists in the data source.
      operationId: 'ServiceRequest.exists__get_serviceRequests_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/serviceRequests/{id}':
    head:
      tags:
        - ServiceRequest
      summary: Check whether a model instance exists in the data source.
      operationId: 'ServiceRequest.exists__head_serviceRequests_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - ServiceRequest
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: ServiceRequest.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ServiceRequest'
      deprecated: false
    delete:
      tags:
        - ServiceRequest
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: ServiceRequest.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - ServiceRequest
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'ServiceRequest.prototype.updateAttributes__put_serviceRequests_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ServiceRequest'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ServiceRequest'
      deprecated: false
    patch:
      tags:
        - ServiceRequest
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'ServiceRequest.prototype.updateAttributes__patch_serviceRequests_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ServiceRequest'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ServiceRequest'
      deprecated: false
  '/serviceRequests/{id}/replace':
    post:
      tags:
        - ServiceRequest
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: ServiceRequest.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ServiceRequest'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ServiceRequest'
      deprecated: false
  /serviceRequests/findOne:
    get:
      tags:
        - ServiceRequest
      summary: Find first instance of the model matched by filter from the data source.
      operationId: ServiceRequest.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ServiceRequest'
      deprecated: false
  /serviceRequests/update:
    post:
      tags:
        - ServiceRequest
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: ServiceRequest.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ServiceRequest'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /serviceRequests/count:
    get:
      tags:
        - ServiceRequest
      summary: Count instances of the model matched by where from the data source.
      operationId: ServiceRequest.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false


definitions:
  x-any:
    properties: {}
  AccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      created:
        type: string
        format: date
      userId:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  User:
    properties:
      realm:
        type: string
      username:
        type: string
      credentials:
        type: object
      challenges:
        type: object
      email:
        type: string
      emailVerified:
        type: boolean
      status:
        type: string
      created:
        type: string
        format: date
      lastUpdated:
        type: string
        format: date
      id:
        type: number
        format: double
    required:
      - email
    additionalProperties: false
  Service:
    properties:
      date:
        type: string
        format: date
      id:
        type: number
        format: double
      patientId:
        type: string
      serviceId:
        type: number
        format: double
      serviceRequestId:
        type: number
        format: double
    additionalProperties: false
  ServiceRequest:
    properties:
      date:
        type: string
        format: date
      serviceType:
        type: number
        format: double
      id:
        type: number
        format: double
      patientId:
        type: string
      serviceRequestId:
        type: string
    additionalProperties: false
  Patient:
    properties:
      SIP:
        description: This is the SIP of the patient
        type: string
      birthDate:
        description: Birthdate of the patient
        type: string
        format: date
      id:
        type: string
      name:
        description: Complete name (first and last name)
        type: string
      phone:
        description: Phone (should be unique)
        type: string
    required:
      - SIP
      - id
    additionalProperties: false

